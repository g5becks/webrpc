{{define "types"}}
// **********************************************************************
// MESSAGE TYPES.
// **********************************************************************

{{- if .Messages -}}
{{range .Messages -}}




{{if .Type | isEnum -}}
{{$enumName := .Name}}
enum {{$enumName}} {
{{- range $i, $field := .Fields}}
  {{- if $i}},{{end}}
  {{$field.Name}}
{{- end}}
}
{{end -}}

{{- if .Type | isStruct  }}
@freezed
abstract class {{.Name}} with _${{.Name}} {
  const factory {{.Name}}({{if .Fields}}{
  {{- range .Fields}}
  {{- if not .Optional}}
    {{if . | exportableField -}}{{. | jsonKey}} {{end}}@required {{.Type | fieldType}} {{.Name}},
    {{- end -}}
    {{- end -}}
    {{- range .Fields}}
  {{- if .Optional}}
   {{if . | exportableField -}}{{. | jsonKey}}{{end}} {{.Type | fieldType}} {{.Name}},
  {{- end -}}
  {{- end }}
  }{{ end }}) = _{{.Name}};
  factory {{.Name}}.fromJson(Map<String, dynamic> json) => _${{.Name}}FromJson(json);
}
{{- end -}}

{{- end -}}
{{- end}}


{{if .Services -}}
{{range .Services -}}
// *********************************************************************
// METHOD ARGUMENT TYPES.
// *********************************************************************
{{- range .Methods -}}
{{- if .Inputs}}
@freezed
abstract class {{. | methodArgumentInputClassName}} with _${{. | methodArgumentInputClassName}} {
  const factory {{. | methodArgumentInputClassName}} ({
  {{- range .Inputs}}
  {{- if not .Optional}}@required {{.Type | fieldType}} {{.Name}},
  {{- end -}} {{/* end of if not .Optional */}}
  {{- end -}} {{/* end of range .Inputs */}}
  {{- range .Inputs}}
  {{if .Optional}}
  {{.Type | fieldType}} {{.Name}},
  {{- end -}}
{{- end}}
  }) = _{{. | methodArgumentInputClassName}};
  factory {{. | methodArgumentInputClassName}}.fromJson(Map<String, dynamic> json) => _${{. | methodArgumentInputClassName}}FromJson(json);
}
{{- end -}} {{/* end of if .Inputs */}}
{{- end -}} {{/* end of range .Methods */}}

// *********************************************************************
// METHOD RETURN TYPES.
// *********************************************************************
{{range .Methods -}}
{{if .Outputs}}

@freezed
abstract class {{. | methodArgumentOutputClassName}} with _${{. | methodArgumentOutputClassName}} {
  const factory {{. | methodArgumentOutputClassName}}({
    {{- range .Outputs}}
  {{- if not .Optional}}@required {{.Type | fieldType}} {{.Name}},
  {{- end -}} {{/* end of if not .Optional */}}
  {{- end -}} {{/* end of range .Outputs */}}
  {{- range .Outputs }}
  {{- if .Optional}}
  {{.Type | fieldType}} {{.Name}},
  {{- end -}}
  {{- end -}}
  }) = _{{. | methodArgumentOutputClassName}};
  factory {{. | methodArgumentOutputClassName}}.fromJson(Map<String, dynamic> json) => _${{. | methodArgumentOutputClassName}}FromJson(json);
}
{{end}} {{/* end of if .Outputs */}}
{{- end -}} {{/* end of range .Methods */}}
{{- end -}}  {{/* end of range .Services For Inputs and Outputs */}}

{{range .Services -}}
// *********************************************************************
// SERVICE INTERFACES.
// *********************************************************************
abstract class {{.Name}}RPC {
  {{- range .Methods}}
  {{. | methodOutputs}} {{.Name | methodName}}({{. | methodInputs}});
  {{- end}}
}
{{- end -}}  {{/* end of range .Services for INTERFACES */}}

{{- end -}} {{/* end of if .Services */}}

{{end -}} {{/* end of top level define */}}

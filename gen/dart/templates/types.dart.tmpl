{{define "types"}}
//
// Types
//

{{- if .Messages -}}
{{range .Messages -}}




{{if .Type | isEnum -}}
{{$enumName := .Name}}
enum {{$enumName}} {
{{- range $i, $field := .Fields}}
  {{- if $i}},{{end}}
  {{$field.Name}}
{{- end}}
}
{{end -}}

{{- if .Type | isStruct  }}
@freezed
abstract class {{.Name}} with _${{.Name}} {
  const factory {{.Name}}({{if .Fields}}{
  {{- range .Fields}}
  {{- if not .Optional}}
    {{if . | exportableField -}}{{. | jsonKey}} {{end}}@required {{.Type | fieldType}} {{.Name}},
    {{- end -}}
    {{- end -}}
    {{- range .Fields}}
  {{- if .Optional}}
   {{if . | exportableField -}}{{. | jsonKey}}{{end}} {{.Type | fieldType}} {{.Name}},
  {{- end -}}
  {{- end }}
  }{{ end }}) = _{{.Name}};
}
{{- end -}}

{{end -}}
{{end -}}


{{if .Services}}
{{range .Services}}

{{range .Methods -}}
{{if .Inputs}}
@freezed
abstract class {{. | methodArgumentInputClassName}} {
{{- range .Inputs}}
  {{.Name}}{{if .Optional}}?{{end}}: {{.Type | fieldType}}
{{- end}}
}
{{end}}


{{if .Outputs}}
@freezed
abstract class {{. | methodArgumentOutputClassName}} {
  const factory {{. | methodArgumentOutputClassName}}({
    {{- range .Outputs}}
  {{- if not .Optional}} @required{{end}} {{.Type | fieldType}} {{.Name}},
{{- end}}
  }) = _{{. | methodArgumentOutputClassName}};
}
{{end}}
{{end}}

abstract class {{.Name}} {
  {{- range .Methods}}
{{. | methodOutputs}} {{.Name | methodName}}({{. | methodInputs}});
  {{- end}}
}
{{end}}
{{- end -}}

{{end -}}

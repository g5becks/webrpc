{{define "server"}}
{{if .Services}}
// *********************************************************************
// SERVICE INTERFACES.
// *********************************************************************
{{range .Services -}}
abstract class {{.Name}} {
  {{- range .Methods}}
  {{. | methodOutputs}} {{.Name | methodName}}({{. | serverMethodInputs}});
  {{- end}}
}
{{- end -}}  {{/* end of range .Services for INTERFACES */}}

// *********************************************************************
// SERVER IMPLEMENTATION.
// *********************************************************************

// For Google Cloud Run, set _hostname to '0.0.0.0'.
const _hostname = 'localhost';

FutureOr<shelf.Response> Function(shelf.Request) router() {
  final me = Example('gary', 36, DateTime(2020));
  final app = Router();
  app.get('/favicon.ico', (shelf.Request r) async => shelf.Response(303));
  app.get('/example', (shelf.Request r) async {
    return shelf.Response.ok(me.toJson(),
        headers: {'Content-Type': 'application/json'});
  });
  return app.handler;
}

void main(List<String> args) async {
  var parser = ArgParser()..addOption('port', abbr: 'p');
  var result = parser.parse(args);

  // For Google Cloud Run, we respect the PORT environment variable
  var portStr = result['port'] ?? Platform.environment['PORT'] ?? '8080';
  var port = int.tryParse(portStr);

  if (port == null) {
    stdout.writeln('Could not parse port value "$portStr" into a number.');
    // 64: command line usage error
    exitCode = 64;
    return;
  }

  var handler = const shelf.Pipeline()
      .addMiddleware(shelf.logRequests())
      .addHandler(_echoRequest);

  var server = await io.serve(handler, _hostname, port);
  print('Serving at http://${server.address.host}:${server.port}');
}

final app = Router();

Future<shelf.Response> _echoRequest(shelf.Request request) async =>
    shelf.Response.ok('Request for "${request.url}"');


{{end}} {{/* end of if .Services */}}
{{end}} {{/* end of top level define */}}

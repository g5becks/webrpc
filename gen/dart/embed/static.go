// Code generated by statik. DO NOT EDIT.

// Package contains static assets.
package embed

var	Asset = "PK\x03\x04\x14\x00\x08\x00\x00\x00\xa1\x1e\x96P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00	\x00client.dart.tmplUT\x05\x00\x01\x9e\xbf\x9f^{{define \"client\"}}\n{{if .Services}}\n//\n// Client\n//\n\nString _removeSlash(String host) => host.endsWith('/')\n? host.replaceRange(host.length - 1, host.length, '')\n: host;\n\n{{range .Services}}\nclass {{.Name}} {\n  final http.Client client;\n  final String host;\n  final String path = '/rpc/{{.Name}}/';\n  String url(String name) => '${_removeSlash(host)}$path$name';\n  {{range .Methods}}\n\n  {{end}}\n  {{.Name}}(this.client, this.host);\n}\n{{end}}\n\n\n{{end}}\n{{end}}\nPK\x07\x08\xee$m\xf8\xcd\x01\x00\x00\xcd\x01\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00\xa1\x1e\x96P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00	\x00helpers.dart.tmplUT\x05\x00\x01\x9e\xbf\x9f^{{define \"helpers\"}}\n\n//\n// Helpers\n//\n\n\n{{end}}PK\x07\x08EC\xf4k0\x00\x00\x000\x00\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00\xf1\xa8\x98P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00	\x00proto.gen.dart.tmplUT\x05\x00\x01\x17U\xa3^{{- define \"proto\" -}}\nimport 'dart:async';\n\nimport 'package:meta/meta.dart';\nimport 'package:freezed_annotation/freezed_annotation.dart';\n{{if .TargetOpts.Client}}\nimport 'package:http/http.dart' as http;\n{{end}}\n{{if .TargetOpts.Server}}\nimport 'package:shelf_router/shelf_router.dart';\nimport 'package:shelf/shelf.dart' as shelf;\nimport 'package:shelf/shelf_io.dart' as io;\nimport 'package:logging/logging.dart';\n{{end}}\n\n// {{.Name}} {{.SchemaVersion}} {{.SchemaHash}}\n// --\n// This file has been generated by https://github.com/webrpc/webrpc using gen/dart\n// Do not edit by hand. Update your webrpc schema and re-generate.\n\n// WebRPC description and code-gen version\nString webRPCVersion()  {\n  return \"{{.WebRPCVersion}}\";\n}\n\n// Schema version of your RIDL schema\nString WebRPCSchemaVersion() {\n  return \"{{.SchemaVersion}}\";\n}\n\n// Schema hash generated from your RIDL schema\nString WebRPCSchemaHash() {\n  return \"{{.SchemaHash}}\";\n}\n\n{{template \"types\" .}}\n\n{{if .TargetOpts.Server}}\n  {{template \"server\" .}}\n{{end}}\n\n{{if .TargetOpts.Client}}\n  {{template \"client\" .}}\n{{end}}\n\n{{template \"helpers\" .}}\n\n{{- end}}\nPK\x07\x08rU\xadYd\x04\x00\x00d\x04\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00G\xb4\x98P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00	\x00server.dart.tmplUT\x05\x00\x01fi\xa3^{{define \"server\"}}\n{{if .Services}}\n// *********************************************************************\n// SERVICE INTERFACES.\n// *********************************************************************\n{{range .Services -}}\nabstract class {{.Name}} {\n  {{- range .Methods}}\n  {{. | methodOutputs}} {{.Name | methodName}}({{. | serverMethodInputs}});\n  {{- end}}\n}\n{{- end -}}  {{/* end of range .Services for INTERFACES */}}\n\n// *********************************************************************\n// SERVER IMPLEMENTATION.\n// *********************************************************************\n\n// For Google Cloud Run, set _hostname to '0.0.0.0'.\nconst _hostname = 'localhost';\n\nFutureOr<shelf.Response> Function(shelf.Request) router() {\n  final me = Example('gary', 36, DateTime(2020));\n  final app = Router();\n  app.get('/favicon.ico', (shelf.Request r) async => shelf.Response(303));\n  app.get('/example', (shelf.Request r) async {\n    return shelf.Response.ok(me.toJson(),\n        headers: {'Content-Type': 'application/json'});\n  });\n  return app.handler;\n}\n\nvoid main(List<String> args) async {\n  var parser = ArgParser()..addOption('port', abbr: 'p');\n  var result = parser.parse(args);\n\n  // For Google Cloud Run, we respect the PORT environment variable\n  var portStr = result['port'] ?? Platform.environment['PORT'] ?? '8080';\n  var port = int.tryParse(portStr);\n\n  if (port == null) {\n    stdout.writeln('Could not parse port value \"$portStr\" into a number.');\n    // 64: command line usage error\n    exitCode = 64;\n    return;\n  }\n\n  var handler = const shelf.Pipeline()\n      .addMiddleware(shelf.logRequests())\n      .addHandler(_echoRequest);\n\n  var server = await io.serve(handler, _hostname, port);\n  print('Serving at http://${server.address.host}:${server.port}');\n}\n\nfinal app = Router();\n\nFuture<shelf.Response> _echoRequest(shelf.Request request) async =>\n    shelf.Response.ok('Request for \"${request.url}\"');\n\n\n{{end}} {{/* end of if .Services */}}\n{{end}} {{/* end of top level define */}}\nPK\x07\x08\xd2\xc3\xca?\xe9\x07\x00\x00\xe9\x07\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x003\xbe\x98P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00	\x00types.dart.tmplUT\x05\x00\x01\x13{\xa3^{{define \"types\"}}\n// **********************************************************************\n// MESSAGE TYPES.\n// **********************************************************************\n\n{{- if .Messages -}}\n{{range .Messages -}}\n\n\n\n\n{{if .Type | isEnum -}}\n{{$enumName := .Name}}\n@freezed\nabstract class {{$enumName}} with _${{$enumName}} {\n{{- range .Fields}}\n  const factory {{$enumName}}.{{. | makeLowerCase}}() = {{.Name}};\n{{- end}}\n  factory {{$enumName}}.fromJson(Map<String, dynamic> json) => _${{$enumName}}FromJson(json);\n}\n{{end -}}\n\n{{- if .Type | isStruct  }}\n@freezed\nabstract class {{.Name}} with _${{.Name}} {\n  const factory {{.Name}}({{if .Fields}}{\n  {{- range .Fields}}\n  {{- if not .Optional}}\n    {{if . | exportableField -}}{{. | jsonKey}} {{end}}@required {{.Type | fieldType}} {{.Name}},\n    {{- end -}}\n    {{- end -}}\n    {{- range .Fields}}\n  {{- if .Optional}}\n   {{if . | exportableField -}}{{. | jsonKey}}{{end}} {{.Type | fieldType}} {{.Name}},\n  {{- end -}}\n  {{- end }}\n  }{{ end }}) = _{{.Name}};\n  factory {{.Name}}.fromJson(Map<String, dynamic> json) => _${{.Name}}FromJson(json);\n}\n{{- end -}}\n\n{{- end -}}\n{{- end}}\n\n\n{{if .Services -}}\n{{range .Services -}}\n// *********************************************************************\n// METHOD ARGUMENT TYPES.\n// *********************************************************************\n{{- range .Methods -}}\n{{- if .Inputs}}\n@freezed\nabstract class {{. | methodArgumentInputClassName}} with _${{. | methodArgumentInputClassName}} {\n  const factory {{. | methodArgumentInputClassName}} ({\n  {{- range .Inputs}}\n  {{- if not .Optional}}@required {{.Type | fieldType}} {{.Name}},\n  {{- end -}} {{/* end of if not .Optional */}}\n  {{- end -}} {{/* end of range .Inputs */}}\n  {{- range .Inputs}}\n  {{if .Optional}}\n  {{.Type | fieldType}} {{.Name}},\n  {{- end -}}\n{{- end}}\n  }) = _{{. | methodArgumentInputClassName}};\n  factory {{. | methodArgumentInputClassName}}.fromJson(Map<String, dynamic> json) => _${{. | methodArgumentInputClassName}}FromJson(json);\n}\n{{- end -}} {{/* end of if .Inputs */}}\n{{- end -}} {{/* end of range .Methods */}}\n\n// *********************************************************************\n// METHOD RETURN TYPES.\n// *********************************************************************\n{{range .Methods -}}\n{{if .Outputs}}\n\n@freezed\nabstract class {{. | methodArgumentOutputClassName}} with _${{. | methodArgumentOutputClassName}} {\n  const factory {{. | methodArgumentOutputClassName}}({\n    {{- range .Outputs}}\n  {{- if not .Optional}}@required {{.Type | fieldType}} {{.Name}},\n  {{- end -}} {{/* end of if not .Optional */}}\n  {{- end -}} {{/* end of range .Outputs */}}\n  {{- range .Outputs }}\n  {{- if .Optional}}\n  {{.Type | fieldType}} {{.Name}},\n  {{- end -}}\n  {{- end -}}\n  }) = _{{. | methodArgumentOutputClassName}};\n  factory {{. | methodArgumentOutputClassName}}.fromJson(Map<String, dynamic> json) => _${{. | methodArgumentOutputClassName}}FromJson(json);\n}\n{{end}} {{/* end of if .Outputs */}}\n{{- end -}} {{/* end of range .Methods */}}\n{{- end -}}  {{/* end of range .Services For Inputs and Outputs */}}\n\n{{- end -}} {{/* end of if .Services */}}\n\n{{end -}} {{/* end of top level define */}}\nPK\x07\x08I\xe1\xc1h\x98\x0c\x00\x00\x98\x0c\x00\x00PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xa1\x1e\x96P\xee$m\xf8\xcd\x01\x00\x00\xcd\x01\x00\x00\x10\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x00\x00\x00\x00client.dart.tmplUT\x05\x00\x01\x9e\xbf\x9f^PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xa1\x1e\x96PEC\xf4k0\x00\x00\x000\x00\x00\x00\x11\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x14\x02\x00\x00helpers.dart.tmplUT\x05\x00\x01\x9e\xbf\x9f^PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xf1\xa8\x98PrU\xadYd\x04\x00\x00d\x04\x00\x00\x13\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x8c\x02\x00\x00proto.gen.dart.tmplUT\x05\x00\x01\x17U\xa3^PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00G\xb4\x98P\xd2\xc3\xca?\xe9\x07\x00\x00\xe9\x07\x00\x00\x10\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81:\x07\x00\x00server.dart.tmplUT\x05\x00\x01fi\xa3^PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x003\xbe\x98PI\xe1\xc1h\x98\x0c\x00\x00\x98\x0c\x00\x00\x0f\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81j\x0f\x00\x00types.dart.tmplUT\x05\x00\x01\x13{\xa3^PK\x05\x06\x00\x00\x00\x00\x05\x00\x05\x00f\x01\x00\x00H\x1c\x00\x00\x00\x00"

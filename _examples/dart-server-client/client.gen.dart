import 'package:meta/meta.dart';

import 'package:http/http.dart' as http;


// example v0.0.1 b22daedd801edc99b28353f3d7912365ee85ad73
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/golang
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
String webRPCVersion()  {
  return "v1";
}

// Schema version of your RIDL schema
String WebRPCSchemaVersion() {
  return "v0.0.1";
}

// Schema hash generated from your RIDL schema
String WebRPCSchemaHash() {
  return "b22daedd801edc99b28353f3d7912365ee85ad73";
}


//
// Types
//
enum Kind {
  USER,
  ADMIN
}

class Empty {

  const Empty();
  }
class User {
  final int id;
  final String username;
  final String role;

  const User({
    @required this.id,
    @required this.username,
    @required this.role,
  });
  
  User copyWith({
      int id,
      String username,
      String role,
  }) {
    return User(
      id: id ?? this.id,
      username: username ?? this.username,
      role: role ?? this.role,
    );
  }}
class SearchFilter {
  final String q;

  const SearchFilter({
    @required this.q,
  });
  
  SearchFilter copyWith({
      String q,
  }) {
    return SearchFilter(
      q: q ?? this.q,
    );
  }}
class Version {
  final String webrpcVersion;
  final String schemaVersion;
  final String schemaHash;

  const Version({
    @required this.webrpcVersion,
    @required this.schemaVersion,
    @required this.schemaHash,
  });
  
  Version copyWith({
      String webrpcVersion,
      String schemaVersion,
      String schemaHash,
  }) {
    return Version(
      webrpcVersion: webrpcVersion ?? this.webrpcVersion,
      schemaVersion: schemaVersion ?? this.schemaVersion,
      schemaHash: schemaHash ?? this.schemaHash,
    );
  }}
class ComplexType {
  final Map<String, dynamic> meta;
  final Map<String, Map<String, int>> metaNestedExample;
  final List<String> namesList;
  final List<int> numsList;
  final List<List<String>> doubleArray;
  final List<Map<String, int>> listOfMaps;
  final List<User> listOfUsers;
  final Map<String, User> mapOfUsers;
  final User user;

  const ComplexType({
    @required this.meta,
    @required this.metaNestedExample,
    @required this.namesList,
    @required this.numsList,
    @required this.doubleArray,
    @required this.listOfUsers,
    @required this.mapOfUsers,
    @required this.user,
    this.listOfMaps,
  });
  
  ComplexType copyWith({
      Map<String, dynamic> meta,
      Map<String, Map<String, int>> metaNestedExample,
      List<String> namesList,
      List<int> numsList,
      List<List<String>> doubleArray,
      List<Map<String, int>> listOfMaps,
      List<User> listOfUsers,
      Map<String, User> mapOfUsers,
      User user,
  }) {
    return ComplexType(
      meta: meta ?? this.meta,
      metaNestedExample: metaNestedExample ?? this.metaNestedExample,
      namesList: namesList ?? this.namesList,
      numsList: numsList ?? this.numsList,
      doubleArray: doubleArray ?? this.doubleArray,
      listOfMaps: listOfMaps ?? this.listOfMaps,
      listOfUsers: listOfUsers ?? this.listOfUsers,
      mapOfUsers: mapOfUsers ?? this.mapOfUsers,
      user: user ?? this.user,
    );
  }}




  

//
// Client
//

String _removeSlash(String host) => host.endsWith('/')
? host.replaceRange(host.length - 1, host.length, '')
: host;


class ExampleService {
  final http.Client client;
  final String host;
  final String path = '/rpc/ExampleService/';
  String url(String name) => '${_removeSlash(host)}$path$name';
  

  

  

  

  

  
  ExampleService(this.client, this.host);
}









//
// Helpers
//



import 'package:meta/meta.dart';
import 'dart:async';

import 'package:http/http.dart' as http;



// example v0.0.1 b22daedd801edc99b28353f3d7912365ee85ad73
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/dart
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
String webRPCVersion()  {
  return "v1";
}

// Schema version of your RIDL schema
String WebRPCSchemaVersion() {
  return "v0.0.1";
}

// Schema hash generated from your RIDL schema
String WebRPCSchemaHash() {
  return "b22daedd801edc99b28353f3d7912365ee85ad73";
}


//
// Types
//
enum Kind {
  USER,
  ADMIN
}

@freezed
abstract class Empty with _$Empty {
  const factory Empty() = _Empty;
}
@freezed
abstract class User with _$User {
  const factory User({
     @required int id,
    @Jsonkey(name: 'USERNAME') @required String username,
     @required String role,
  }) = _User;
}
@freezed
abstract class SearchFilter with _$SearchFilter {
  const factory SearchFilter({
     @required String q,
  }) = _SearchFilter;
}
@freezed
abstract class Version with _$Version {
  const factory Version({
     @required String webrpcVersion,
     @required String schemaVersion,
     @required String schemaHash,
  }) = _Version;
}
@freezed
abstract class ComplexType with _$ComplexType {
  const factory ComplexType({
     @required Map<String, dynamic> meta,
     @required Map<String, Map<String, int>> metaNestedExample,
     @required List<String> namesList,
     @required List<int> numsList,
     @required List<List<String>> doubleArray,
     @required List<User> listOfUsers,
     @required Map<String, User> mapOfUsers,
     @required User user,
    List<Map<String, int>> listOfMaps,
  }) = _ComplexType;
}










@freezed
abstract class StatusReturn {
  const factory StatusReturn({ @required bool status,
  }) = _StatusReturn;
}





@freezed
abstract class VersionReturn {
  const factory VersionReturn({ @required Version version,
  }) = _VersionReturn;
}


@freezed
abstract class GetUserArgs {
  header: Map<String, String>
  userID: int
}




@freezed
abstract class GetUserReturn {
  const factory GetUserReturn({ @required int code, @required User user,
  }) = _GetUserReturn;
}


@freezed
abstract class FindUserArgs {
  s: SearchFilter
}




@freezed
abstract class FindUserReturn {
  const factory FindUserReturn({ @required String name, @required User user,
  }) = _FindUserReturn;
}



abstract class ExampleService {
FutureOr<PingReturn> ping({Map<String, String> headers});
FutureOr<StatusReturn> status({Map<String, String> headers});
FutureOr<VersionReturn> version({Map<String, String> headers});
FutureOr<GetUserReturn> getUser({@required GetUserArgs args, Map<String, String> headers});
FutureOr<FindUserReturn> findUser({@required FindUserArgs args, Map<String, String> headers});
}





  

//
// Client
//

String _removeSlash(String host) => host.endsWith('/')
? host.replaceRange(host.length - 1, host.length, '')
: host;


class ExampleService {
  final http.Client client;
  final String host;
  final String path = '/rpc/ExampleService/';
  String url(String name) => '${_removeSlash(host)}$path$name';
  

  

  

  

  

  
  ExampleService(this.client, this.host);
}









//
// Helpers
//


